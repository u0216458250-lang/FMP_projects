#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º CSV —Ñ–∞–π–ª–∞
"""
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import json
import csv
from datetime import datetime
import conf
import logging
import subprocess
import sys
import os

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_FILE_PATH = os.path.join(BASE_DIR, 'full_parser_with_csv.log')
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE_PATH),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def update_csv_with_results(results, input_csv=conf.INPUT_CSV, output_csv=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç CSV —Ñ–∞–π–ª —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
    
    if output_csv is None:
        base, ext = os.path.splitext(input_csv)
        output_csv = f"{base}_results{ext}"
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    results_dict = {}
    for track in results:
        key = f"{track.get('artist', '')}_{track.get('title', '')}"
        if track.get('found'):
            results_dict[key] = 'FindTheTune'
        elif track.get('status') == 'not_found':
            results_dict[key] = 'NIL'
        elif track.get('status') == 'error':
            results_dict[key] = 'ERROR'
        else:
            results_dict[key] = ''
    
    # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π CSV –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    rows_with_results = []
    
    with open(input_csv, 'r', encoding='utf-8') as f:
        sample = f.read(1024)
        f.seek(0)
        delimiter = ';' if ';' in sample else ','
        
        reader = csv.DictReader(f, delimiter=delimiter)
        fieldnames = reader.fieldnames + ['FindStatus']
        
        for row in reader:
            artist = row.get('Artist', '').strip()
            title = row.get('Title', '').strip()
            key = f"{artist}_{title}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
            row['FindStatus'] = results_dict.get(key, '')
            rows_with_results.append(row)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π CSV —Ñ–∞–π–ª
    with open(output_csv, 'w', encoding='utf-8', newline='') as f:
        writer = csv.DictWriter(f, fieldnames=fieldnames, delimiter=delimiter)
        writer.writeheader()
        writer.writerows(rows_with_results)
    
    return True

def full_parser_with_csv():
    """–ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º CSV"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ (–ë–ï–ó headless —Ä–µ–∂–∏–º–∞)
    options = Options()
    options.add_argument(f'--window-size=1920,1080')
    options.add_argument('--disable-blink-features=AutomationControlled')
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞
    service = Service('/usr/bin/chromedriver')
    driver = webdriver.Chrome(service=service, options=options)
    wait = WebDriverWait(driver, 30)
    
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        logger.info(f"–û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {conf.LOGIN_URL}")
        driver.get(conf.LOGIN_URL)
        
        print("\n" + "="*60)
        print("–ü–û–õ–ù–´–ô –ü–ê–†–°–ï–† –° –û–ë–ù–û–í–õ–ï–ù–ò–ï–ú CSV")
        print("="*60)
        print("\n1. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤—Ä—É—á–Ω—É—é –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –±—Ä–∞—É–∑–µ—Ä–µ")
        print("2. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Enter –≤ —ç—Ç–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ")
        print("\n" + "="*60)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        current_url = driver.current_url
        logger.info(f"–¢–µ–∫—É—â–∏–π URL –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {current_url}")
        
        print("\n‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤...")
        print("üìù CSV —Ñ–∞–π–ª –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 20 —Ç—Ä–µ–∫–æ–≤")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤ –∏–∑ CSV
        tracks = []
        with open(conf.INPUT_CSV, 'r', encoding='utf-8') as file:
            sample = file.read(1024)
            file.seek(0)
            delimiter = ';' if ';' in sample else ','
            
            reader = csv.DictReader(file, delimiter=delimiter)
            for row in reader:
                tracks.append({
                    'title': row.get('Title', '').strip(),
                    'artist': row.get('Artist', '').strip(),
                    'status': 'pending',
                    'found': False
                })
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tracks)} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        results = []
        
        # –ü–æ–∏—Å–∫ –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞
        for i, track in enumerate(tracks, 1):
            if not track['title'] or not track['artist']:
                continue
                
            print(f"\n[{i}/{len(tracks)}] –ü–æ–∏—Å–∫: {track['artist']} - {track['title']}", end=' ')
            
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π URL –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
                before_search_url = driver.current_url
                
                # –ü–æ–∏—Å–∫ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                search_field = None
                
                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                selectors = [
                    "input[type='search']",
                    "input[placeholder*='Search']",
                    "input[placeholder*='search']",
                    "input[name*='search']",
                    "input[id*='search']",
                    "input.search",
                    "#search",
                    "input[type='text']"
                ]
                
                for selector in selectors:
                    try:
                        elements = driver.find_elements(By.CSS_SELECTOR, selector)
                        for elem in elements:
                            if elem.is_displayed() and elem.is_enabled():
                                search_field = elem
                                break
                        if search_field:
                            break
                    except:
                        continue
                
                if not search_field:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è —Ç—Ä–µ–∫–∞ {i}")
                    track['status'] = 'error'
                    track['error'] = '–ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                    results.append(track)
                    print("‚ö†Ô∏è –û–®–ò–ë–ö–ê")
                    continue
                
                # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                try:
                    driver.execute_script("arguments[0].value = '';", search_field)
                    time.sleep(0.2)
                except:
                    pass
                
                search_field.click()
                time.sleep(0.1)
                search_field.send_keys(Keys.CONTROL + "a")
                time.sleep(0.1)
                search_field.send_keys(Keys.BACKSPACE)
                time.sleep(0.2)
                search_field.clear()
                time.sleep(0.2)
                
                # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞
                current_value = search_field.get_attribute('value')
                if current_value:
                    for _ in range(len(current_value) + 10):
                        search_field.send_keys(Keys.BACKSPACE)
                    time.sleep(0.2)
                
                # –í–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
                search_query = f"{track['artist']} {track['title']}"
                search_field.send_keys(search_query)
                time.sleep(0.3)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
                search_field.send_keys(Keys.RETURN)
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                results_loaded = False
                max_wait_time = 10
                start_time = time.time()
                
                while time.time() - start_time < max_wait_time:
                    current_url = driver.current_url
                    if current_url != before_search_url:
                        results_loaded = True
                        time.sleep(2)
                        break
                    
                    try:
                        body_text = driver.find_element(By.TAG_NAME, "body").text
                        if any(keyword in body_text.lower() for keyword in ['results', 'found', 'tracks', 'no results', 'not found']):
                            results_loaded = True
                            time.sleep(1)
                            break
                    except:
                        pass
                    
                    time.sleep(0.5)
                
                # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                page_text = driver.find_element(By.TAG_NAME, "body").text.lower()
                
                track['page_url'] = driver.current_url
                track['search_query'] = search_query
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                found_indicators = [
                    'result' in page_text and 'no result' not in page_text,
                    'found' in page_text and 'not found' not in page_text,
                    'track' in page_text,
                    track['title'].lower() in page_text,
                    track['artist'].lower() in page_text
                ]
                
                not_found_indicators = [
                    'no results' in page_text,
                    'not found' in page_text,
                    '0 results' in page_text,
                    'nothing found' in page_text,
                    'no tracks' in page_text
                ]
                
                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                result_elements = []
                result_selectors = [
                    ".result", ".track", ".song", 
                    "[class*='result']", "[class*='track']", "[class*='song']",
                    ".item", ".list-item", "tr", "li"
                ]
                
                for selector in result_selectors:
                    try:
                        elements = driver.find_elements(By.CSS_SELECTOR, selector)
                        if elements:
                            visible_elements = [e for e in elements if e.is_displayed() and e.text.strip()]
                            if visible_elements:
                                result_elements.extend(visible_elements[:5])
                                break
                    except:
                        continue
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                if any(not_found_indicators):
                    track['found'] = False
                    track['status'] = 'not_found'
                    print("‚ùå NIL")
                elif result_elements or any(found_indicators):
                    track['found'] = True
                    track['status'] = 'found'
                    track['matches_count'] = len(result_elements)
                    print("‚úÖ FindTheTune")
                else:
                    track['status'] = 'unknown'
                    print("‚ùì")
                
                results.append(track)
                
                # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
                if i < len(tracks):
                    driver.get(before_search_url)
                    time.sleep(1)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CSV –∫–∞–∂–¥—ã–µ 20 —Ç—Ä–µ–∫–æ–≤
                if i % 20 == 0:
                    intermediate_json_path = os.path.join(BASE_DIR, 'intermediate_full_results.json')
                    save_results(results, intermediate_json_path)
                    update_csv_with_results(results)
                    print(f"\nüíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ CSV –æ–±–Ω–æ–≤–ª–µ–Ω ({i} —Ç—Ä–µ–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ)")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–∞ {track['artist']} - {track['title']}: {e}")
                track['status'] = 'error'
                track['error'] = str(e)
                results.append(track)
                print("‚ö†Ô∏è –û–®–ò–ë–ö–ê")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        final_json_path = os.path.join(BASE_DIR, 'full_search_results.json')
        save_results(results, final_json_path)
        update_csv_with_results(results)
        
        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\n" + "="*60)
        print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–ù–û–ì–û –ü–û–ò–°–ö–ê:")
        print("="*60)
        found_count = sum(1 for r in results if r.get('found'))
        not_found_count = sum(1 for r in results if r.get('status') == 'not_found')
        unknown_count = sum(1 for r in results if r.get('status') == 'unknown')
        error_count = sum(1 for r in results if r.get('status') == 'error')
        
        print(f"‚úÖ FindTheTune: {found_count} ({found_count/len(results)*100:.1f}%)")
        print(f"‚ùå NIL: {not_found_count} ({not_found_count/len(results)*100:.1f}%)")
        print(f"‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ: {unknown_count}")
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∏: {error_count}")
        print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(results)}")
        print("="*60)
        
        print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ full_search_results.json")
        print(f"üìã CSV —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: serch_list_with_results.csv")
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    
    finally:
        print("\n–ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)
        driver.quit()

def save_results(results, filename):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON"""
    output = {
        'search_date': datetime.now().isoformat(),
        'total_tracks': len(results),
        'found': sum(1 for r in results if r.get('found')),
        'not_found': sum(1 for r in results if r.get('status') == 'not_found'),
        'unknown': sum(1 for r in results if r.get('status') == 'unknown'),
        'errors': sum(1 for r in results if r.get('status') == 'error'),
        'tracks': results
    }
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(output, f, ensure_ascii=False, indent=2)

if __name__ == "__main__":
    full_parser_with_csv()
